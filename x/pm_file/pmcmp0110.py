import datetime as pydateimport osimport xml.saximport loggingimport refrom optparse import OptionParser#base_dir='./pmbasebackup-R15/mmesgsn/mme-pmfile-5'global logPMParserlogging.basicConfig(level=logging.DEBUG,                    format='%(asctime)s:%(filename)s[line:%(lineno)d] %(levelname)s %(message)s',                    datefmt='%a, %d %b %Y %H:%M:%S',                    filename = os.path.join(os.getcwd(),'Detail.log'),                    filemode='w')logPMParser=logging.getLogger('pmcmp.py')def find_pm_file(path,timestamp):	for i in os.listdir(path):		if (i.find(timestamp) != -1):			return i        else:            return "missing"	 def get_src_file():   if options.time == True:       nowtime = pydate.datetime.now()       print nowtime   else:       pm_time = options.time       nowtime = pydate.datetime.strptime(pm_time,"%Y%m%d%H%M%S")   round = 60/npm_interval   timeshift=nowtime.minute%npm_interval   dict1={}   for i in range(1,round+1):    timeshift += npm_interval    time_delta = nowtime + pydate.timedelta(minutes = -timeshift)    pm_timestamp = time_delta.strftime("%Y%m%d") + "-" + time_delta.strftime("%H%M")    pm_file = find_pm_file(npm_dir,pm_timestamp)    if (pm_file != "missing") :        dict1[time_delta.strftime("%M")] = npm_dir+"/"+ pm_file    i=i+1   return dict1	def get_base_file():    dict2={}    for filename in os.listdir(base_dir):     pm_timestamp = filename[-6:-4]     dict2[pm_timestamp] = base_dir+"/"+filename    return dict2def compare_pm(srcfile, basefile):    node1=getPmInfo(srcfile)    node2=getPmInfo(basefile)    for a,b in node2.items():        if(a=="FileHeader"):            for c,d in b.items():                if node1[a].has_key(c) == True:                    if (node1[a][c] != node2[a][c]):                        logPMParser.error(srcfile + " VS " + basefile + " failed ")                        logging.error("failed." + a + "/" + c +" value is " + str(node1[a][c]) + " ,the expected result is:" + str(node2[a][c])  + " in " + basefile)                        return -1                else:                    logPMParser.error(srcfile + " VS " + basefile + " failed ")                    logPMParser.error("attribute:" + a + "/" + c + " missing.")                    return -1        elif(a=="PMData"):            for i,j in b.items():                if node1[a].has_key(i) == True:                    for v1,v2 in j.items():                        if node1[a][i].has_key(v1) == True:                            if node1[a][i][v1] != node2[a][i][v1]:                                logPMParser.error(srcfile + " VS " + basefile + " failed ")                                logPMParser.error("counter:" + a + "/" + i + "/" + v1 + " value is " + node1[a][i][v1] + " ,the expected result is:" + str(node2[a][i][v1]))                                return -1                        else:                            logPMParser.error(srcfile + " VS " + basefile + " failed ")                            logPMParser.error("counter:" + a + "/"+ i + "/" + v1 + " missing.")                            return -1                else:                    logPMParser.error(srcfile + " VS " + basefile + " failed ")                    logPMParser.error("DN:" + a + "/" + i + " missing.")                    return -1    for a, b in node1.items():        if(a=="FileHeader"):            for c,d in b.items():                if node2[a].has_key(c) == False:                    logPMParser.error(srcfile + " VS " + basefile + " failed ")                    logPMParser.error("extra attribute:" + a + "/" + c + " in " + srcfile)                    return -1        elif(a=="PMData"):            for i,j in b.items():                if node2[a].has_key(i) == False:                    logPMParser.error(srcfile + " VS " + basefile + " failed ")                    logPMParser.error("extra DN:" + a + "/" + i + " in " + srcfile)                    return -1                else:                    for v1,v2 in j.items():                        if node2[a][i].has_key(v1) == False:                            logPMParser.error(srcfile + " VS " + basefile + " failed ")                            logPMParser.error("extra counter:" + a + "/" + i + "/" + v1 + " in " + srcfile)                            return -1class PMSaxHandler(xml.sax.ContentHandler):    def __init__(self):        xml.sax.ContentHandler.__init__(self)        logPMParser.info('SAX handler init.')        self.node = {}        self.isHeader = False        self.headerPara = {}        self.counters = {}        self.counter = ""        self.lics = {}        self.isLic = False        self.key = None        self.isCounter = False        self.dn = ""        def startElement(self, name, attrs):        if(name == "FileHeader"):            self.isHeader = True            logPMParser.info('Found a header information.')        elif(name == "Pm"):            self.isLic = True            self.dn = attrs["Dn"].strip().encode('utf-8')            logPMParser.info('Found a lic information.')        elif(name == "V"):            self.isCounter = True            self.counter = attrs["i"].strip().encode('utf-8')        self.key = name.strip().encode('utf-8')        def characters(self, content):        content = content.strip().encode('utf-8')        if(self.isHeader):            if('FileHeader' != self.key and 'BeginTime' != self.key and 'EndTime' != self.key):                if(self.key is not None):                    self.headerPara[self.key] = content        elif(self.isLic and self.isCounter):            if('V' == self.key):                if(self.key is not None):                    self.counters[self.counter] = content        def endElement(self, name):        if(name == self.key):            self.key = None        if('Pm' == name):            self.isLic = False            self.lics[self.dn] =  self.counters            self.counters = {}        if('FileHeader' == name):            self.isHeader = False        if('V' == name):            self.isCounter = False                    def endDocument(self):            self.node["FileHeader"] = self.headerPara        self.node["PMData"] = self.lics        logPMParser.info('End the parsing of XML.')       def getPmInfo(xmlpath):    parser = xml.sax.make_parser()    handler = PMSaxHandler()    parser.setContentHandler(handler)    parser.parse(open(xmlpath, 'r'))    return handler.nodedef getOptions():    parser = OptionParser(usage="usage: %prog --path --type [--interval] [--time] [--help]")    parser.add_option("-i","--interval",action="store",type="int",dest="interval",default=5, help="specify the pm file interval[5|15]")    parser.add_option("-t","--type",action="store",type="string",dest="ne_type",default=True, help="specify the ne type of the pm file")    parser.add_option("-l","--time",action="store",type="string",dest="time",default=True, help="specify the timestamp from which to start comparing the pm files[YYmmddHHMMSS]")    parser.add_option("-p","--path",action="store",type="string",dest="path",default=True,help="specify the northbound pm file folder")    (options,args)=parser.parse_args()    if (options.path == True):        parser.error("-p is mandatory to input.")        parser.print_help()        return -1    if (options.ne_type == True):        parser.error("-t is mandatory to input.")        parser.print_help()        return -1    if (options.interval % 5):        parser.error("incorrect interval.It must be mutiples of 5")        return -1    pattern = re.compile(r'\d{14}')    match = pattern.match(options.time)    if match == None:        print "The pm  timestamp should be in format of YYmmddHHMMSS."        parser.print_help()        return -1    return optionsdef load_conf(file):    base_dirs={}    f=open(file,"r")    for i in f.readlines():        i=i.strip()        if(i and i.startswith('#') == False):            name=i.split("=")[0].split("-")            netype=name[1]+"-"+name[2]            if(len(i.split("="))==2):                base_dirs[netype]=i.split("=")[1]    return base_dirsdef get_file_number(path):    i=0    for f in os.listdir(path):        if f.startswith('.') == False:            i+=1    return iif __name__ == '__main__':    options = getOptions()    if options==-1:        exit()    else:        base_dirs=load_conf('./conf/pmcmp.conf')        netype=options.ne_type.lower()+ "-" + str(options.interval)        if(base_dirs.has_key(netype)):            base_dir=base_dirs[netype]        else:            print "The base of pm path for the given netype is not configured"            exit()        npm_dir=options.path        npm_interval=options.interval        pm_time=options.time    if(not os.path.exists(npm_dir)):        print "The northbound pm directory not existed:" + npm_dir        exit()    if(not os.path.exists(base_dir)):        print "The base pm directory not existed:" + base_dir        exit()    dict1=get_src_file()    dict2=get_base_file()    len_src_file=len(dict1.items())    len_base_file=get_file_number(base_dir)    success_num = 0    fail_num = 0    if(len_src_file==0):        print "no required pm files can be found in " + npm_dir        exit()    if(len_base_file!=60/npm_interval):        print "The filenumber incorrect for the base pm file. The filenumber is " + str(len_base_file) + ", but the expected is " + str(60/npm_interval) + " for interval of " + str(options.interval)        exit()    if(len_src_file != len_base_file):        print "The filenumber is not matched between base and northbound pm files! The northbound pm filenumber is:" + str(len_src_file) + ", but the base filenumber is:" + str(len_base_file)        exit()    else:        print "Start PM comparing............"        for a,b in dict1.items():            if dict2.has_key(a) == True:               flag = compare_pm(dict1[a],dict2[a])               if flag == -1:                   fail_num += 1                   print dict1[a] + " VS " + dict2[a] + " failed. For failed reason pls refer to Detail.log"               else:                   success_num += 1                   logPMParser.debug(dict1[a] + " VS " + dict2[a] + " success.")                   print dict1[a] + " VS " + dict2[a] + " success "        print "Finish PM comparing. Total:" + str(len_base_file) + " files.Success:" + str(success_num) + " Fail:" + str(fail_num)               